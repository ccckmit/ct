# 計算理論簡介

## 何謂計算理論？

計算理論是資訊科學的理論基礎，主要探討電腦能力極限的問題，哪些是電腦有可能解決的問題，哪些是電腦無法解決的問題，以下是計算理論的兩大問題：

* 哪些問題是可計算的？ (What can be computed?)
* 計算該問題需要花費多少時間與空間？ (Given a problem, how much resource do we need to compute it ?)

計算理論有一些子領域，像是自動推論領域，探討的就是如何利用電腦證明數學定理。(Prove mathematical theorem using computer) ， 但是這個問題其實不像我們想像的那麼狹窄，廣義的來看，自動推論問題其實就是在探究如何利用電腦解決問題 (Computer-based problem solving)。

舉例而言，以下是一些邏輯規則，

$\forall x \forall y \forall z\quad x*(y*z) = (x*y)*z$

$\exists x \exists y \quad x*y = y$

說明：以上形式中的前面部份，是一階邏輯中的量詞限制條件，而內容部份的寫法則通常可以用下列形式表達。

$A_1 & ... & A_n => P_1 & ... & P_n$

在自動推論中，經常使用某些公理系統，作為推論的基本法則，這些公理系統必須具備「一致性」(consistent)，不能有邏輯矛盾的情況出現。計算機科學家必須研究如何利用這些公理証明所有可證明的定理，這幾乎就是在研究電腦能力的極限了。

## 邏輯推論系統

為了討論電腦的能力極限，我們往往需要藉助邏輯系統來進行描述，以下是經典邏輯系統所探討的主題，也是很多計算理論書籍的切入點。

* 邏輯系統：布林邏輯 (Boolean Logic)、謂詞邏輯 (Predicate Logic)、一階邏輯 (First Order Logic)、哥德爾完備定律、哥德爾不完備定律。

為了讓讀者感受到「邏輯與計算理論之間的關係」，請讀者先看看以下這個「皮諾公設系統」 (Peano Axiom of Natural Number System)，這是一個「數論」領域的簡單公理系統。

```
PE1 : 0 exist
PE2 : x' = x+1
PE3 : x' > x
PE4 : if x' = y' then x = y
PE5 : (數學歸納法)  if P(0) and P(x) => P(x') then $\forall x \quad P(x)$
```

您可以看到上述的的公理系統都是採用邏輯的方式描述的，我們可以透過數學思考去解析這類的公理系統，以變理解該「數學系統的能力極限」，而這也正是計算理論課程所想要探討的主題。

計算理論與演算法所探討的，可以說是一體兩面的東西。演算法探討用電腦解決問題的方法，但計算理論則注重電腦是否能解決該問題，或者能否在有限的時間內解決某問題。

以計算理論的角度看來，演算法所做的事情是：「尋找一個程式，該程式可以正確的輸出某個問題的答案」。如果我們將該問題改寫成邏輯數學式，則可以寫成如下的語句。

$\forall x \quad p(x) => \exists z \quad q(x,z)$

上述語句中的 p(x) 是「輸入限制函數」，而 q(x,z) 則是「輸出限制函數」。

## 哪些問題是可計算的？

在還沒有電腦的時代，哥德爾、圖靈等數學家就已經用數學在討論電腦能力的極限了，

* 電腦能力極限：圖靈機（Turing Machine)、停止問題 (Halting Problem)、可計算性問題。

## 哪些問題要算很久？

* 演算法複雜度：Big O 複雜度，多項式複雜度，指數複雜度，NP-Complete。

## 計算理論的經典問題

圖靈等數學家透過這些辯證探討了以下的重要主題，這些主題構成了電腦計算能力的理論核心：

* 對角證法
* 實數的數量為不可數無限大
* 羅素悖論 -- 理髮師悖論
 * 有一個理髮師，他宣稱要為所有不自己剪頭髮的人剪髮，但是不為任何自己剪髮的人剪髮。
* 停止問題：請寫一個程式判斷另一個程式會不會停。
* NP-Complete：加上 Oracle (神諭) 的電腦可以在多項式時間內解決的問題。
 * 多項式時間： O(1), O(n),  O(n^2),  O(n^3),  ... , O(n^k)
 * 指數時間： O(2^n), O(3^n),  ... , O(k^n)
 
## 相關資源

* [YouTube: 課堂錄影 -- 計算理論](http://www.youtube.com/watch?v=bt237Rab9GA)
